[buildout]
develop = ${:directory}/../../.
# List of tests
parts =
    play
    play-and-stop
    reverb
    reverb-with-different-channel-count
    jump-to
    channel-mapping
    channel-mapping-2
    channel-mapping-3
    set-decibel
    start-gui

[test-walkman-part]
recipe = zc.recipe.egg
eggs = audiowalkman
test-code =
initialization =
    def main(): pass
    ${:test-code}
entry-points = test_${:_buildout_section_name_}=__main__:main

[test-walkman-part-with-toml-str]
<= test-walkman-part
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    loop = true
test-code =
    import time
    import walkman
    toml_string = r"""
    ${:toml-string}
    """
    ${:post-toml-code}

[test-audio-walkman-part]
<= test-walkman-part-with-toml-str
post-toml-code =
    audio_host = walkman.configurations.toml_str_to_audio_host(toml_string)
    ${:test-audio-host}

# Test if simple play works.
#
#   It's important that the sound file starts
#   at all.
#
#   It's important that play doesn't have
#   clicks when stopping (there should be an
#   envelope!).
[play]
<= test-audio-walkman-part
test-audio-host =
    audio_host.start()

    time.sleep(0.1)

    audio_host.sound_file_player.play()

    time.sleep(4)

    audio_host.sound_file_player.stop()
    audio_host.stop()

# Test if playing and stopping works.
#
#   It's important that after stopping the sound file
#   and starting the sound file again, it continues
#   where it has been stopped (and doesn't start from
#   beginning again!)
[play-and-stop]
<= test-audio-walkman-part
test-audio-host =
    audio_host.sound_file_player.play()

    delay_time = 1.5

    audio_host.start()
    time.sleep(delay_time)
    audio_host.stop()
    time.sleep(0.5)

    audio_host.start()
    time.sleep(delay_time)
    audio_host.stop()
    time.sleep(0.5)

    audio_host.start()
    time.sleep(delay_time)
    audio_host.stop()

# Test if adding reverb works
[reverb]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    loop = true
    [reverb]
    sound_file_path = "soundfiles/impulse_response0.wav"
    decibel = -6

# Test if adding reverb works
[reverb-with-different-channel-count]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    loop = true
    [reverb]
    sound_file_path = "soundfiles/impulse_response1.wav"
    decibel = -6

# Test if method "jump_to" works correctly
#
#   Soundfile should jump after 3 seconds to a later part.
#   It's important that there aren't any clicks between the jump.
#   It's also important that the first time it won't stop, but the
#   second time it would.
[jump-to]
<= test-audio-walkman-part
test-audio-host =
    audio_host.start()
    audio_host.sound_file_player.play()
    time.sleep(3)

    audio_host.sound_file_player.jump_to(15)
    time.sleep(3)
    audio_host.stop()
    
    time.sleep(1)

    audio_host.sound_file_player.stop()
    audio_host.sound_file_player.jump_to(1)
    audio_host.sound_file_player.play()
    audio_host.start()
    time.sleep(3)

    audio_host.stop()

# Test if sound file can loop
#
#   TODO(implement)
[loop]
<= test-audio-walkman-part

# Test if setting channel mapping works.
#
#   It's important that the sound file starts.
#
#   It's important that both channels are
#   on the right channel and no channel is on the
#   left channel.
[channel-mapping]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    loop = true
    [audio.channel_mapping]
    # Send both left and right channels to right channel
    0 = 1
    1 = 1

# Test if setting channel mapping works.
#
#   It's important that the sound file starts.
#
#   It's important that there is sound on left and
#   right channel (but the same signal).
#
#   Compare with next section to verify the difference.
[channel-mapping-2]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example-1.wav"
    [audio.channel_mapping]
    # Send mono channel to left and right channel
    0 = [0, 1]

[channel-mapping-3]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example-1.wav"
    [audio.channel_mapping]
    # Send mono channel to left and right channel
    0 = 0

[set-decibel]
<= play
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    decibel = -20


[start-gui]
<= test-walkman-part-with-toml-str
toml-string =
    [soundfile.example]
    path = "soundfiles/example.wav"
    loop = true
    decibel = -22
    [soundfile.second-example]
    path = "soundfiles/example-4-channel.wav"
    decibel = 6
post-toml-code =
    import logging
    walkman.constants.LOGGER.setLevel(logging.DEBUG)
    audio_host = walkman.boot.start_loop_from_toml_str(toml_string)
